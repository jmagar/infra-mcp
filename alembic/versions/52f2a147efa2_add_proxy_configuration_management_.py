"""Restructure monitoring tables schema

Revision ID: 52f2a147efa2
Revises: af4ba97c1822
Create Date: 2025-07-31 22:20:11.976805

"""
from collections.abc import Sequence
from typing import Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '52f2a147efa2'
down_revision: str | Sequence[str] | None = 'af4ba97c1822'
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('backup_status', sa.Column('time', sa.DateTime(timezone=True), nullable=True, server_default=sa.text('now()')))
    op.add_column('backup_status', sa.Column('backup_id', sa.String(length=255), nullable=True))
    op.add_column('backup_status', sa.Column('backup_method', sa.String(length=100), nullable=True))
    op.add_column('backup_status', sa.Column('backup_location', sa.String(length=255), nullable=True))
    op.add_column('backup_status', sa.Column('backup_start_time', sa.DateTime(timezone=True), nullable=True))
    op.add_column('backup_status', sa.Column('backup_end_time', sa.DateTime(timezone=True), nullable=True))
    op.add_column('backup_status', sa.Column('backup_duration_seconds', sa.Integer(), nullable=True))
    op.add_column('backup_status', sa.Column('backup_status', sa.String(length=50), nullable=True))
    op.add_column('backup_status', sa.Column('data_size_bytes', sa.BigInteger(), nullable=True))
    op.add_column('backup_status', sa.Column('backup_size_bytes', sa.BigInteger(), nullable=True))
    op.add_column('backup_status', sa.Column('compression_ratio', sa.Numeric(precision=5, scale=4), nullable=True))
    op.add_column('backup_status', sa.Column('deduplication_ratio', sa.Numeric(precision=5, scale=4), nullable=True))
    op.add_column('backup_status', sa.Column('transfer_rate_mbps', sa.Numeric(precision=10, scale=2), nullable=True))
    op.add_column('backup_status', sa.Column('verification_status', sa.String(length=50), nullable=True))
    op.add_column('backup_status', sa.Column('verification_method', sa.String(length=100), nullable=True))
    op.add_column('backup_status', sa.Column('checksum', sa.String(length=255), nullable=True))
    op.add_column('backup_status', sa.Column('checksum_algorithm', sa.String(length=50), nullable=True))
    op.add_column('backup_status', sa.Column('error_messages', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('backup_status', sa.Column('retention_days', sa.Integer(), nullable=True))
    op.add_column('backup_status', sa.Column('expiry_date', sa.Date(), nullable=True))
    op.add_column('backup_status', sa.Column('is_archived', sa.Boolean(), nullable=True))
    op.add_column('backup_status', sa.Column('archive_location', sa.String(length=255), nullable=True))
    op.add_column('backup_status', sa.Column('backup_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('backup_status', sa.Column('backup_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('backup_status', sa.Column('tags', sa.ARRAY(sa.String()), nullable=True))
    # Make time column NOT NULL after setting default values
    op.alter_column('backup_status', 'time',
               existing_type=sa.DateTime(timezone=True),
               nullable=False,
               server_default=None)
    # Update existing rows with backup_id values, then make it NOT NULL
    op.execute("UPDATE backup_status SET backup_id = 'backup_' || EXTRACT(EPOCH FROM COALESCE(time, NOW()))::text || '_' || device_id WHERE backup_id IS NULL")
    op.alter_column('backup_status', 'backup_id',
               existing_type=sa.String(length=255),
               nullable=False)
    op.alter_column('backup_status', 'backup_type',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=50),
               nullable=True)
    op.alter_column('backup_status', 'error_count',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=True)
    op.alter_column('backup_status', 'warning_count',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=True)
    op.drop_index(op.f('idx_backup_status_backup_type'), table_name='backup_status')
    op.drop_index(op.f('idx_backup_status_created_at'), table_name='backup_status')
    op.drop_index(op.f('idx_backup_status_device_id'), table_name='backup_status')
    op.drop_index(op.f('idx_backup_status_end_time'), table_name='backup_status')
    op.drop_index(op.f('idx_backup_status_metadata'), table_name='backup_status', postgresql_using='gin')
    op.drop_index(op.f('idx_backup_status_start_time'), table_name='backup_status')
    op.drop_index(op.f('idx_backup_status_status'), table_name='backup_status')
    op.drop_column('backup_status', 'success_count')
    op.drop_column('backup_status', 'duration_seconds')
    op.drop_column('backup_status', 'created_at')
    op.drop_column('backup_status', 'end_time')
    op.drop_column('backup_status', 'error_message')
    op.drop_column('backup_status', 'compressed_size_bytes')
    op.drop_column('backup_status', 'id')
    op.drop_column('backup_status', 'size_bytes')
    op.drop_column('backup_status', 'status')
    op.drop_column('backup_status', 'start_time')
    op.drop_column('backup_status', 'files_count')
    op.drop_column('backup_status', 'metadata')
    op.add_column('container_snapshots', sa.Column('image_id', sa.String(length=64), nullable=True))
    op.add_column('container_snapshots', sa.Column('running', sa.Boolean(), nullable=True))
    op.add_column('container_snapshots', sa.Column('paused', sa.Boolean(), nullable=True))
    op.add_column('container_snapshots', sa.Column('restarting', sa.Boolean(), nullable=True))
    op.add_column('container_snapshots', sa.Column('oom_killed', sa.Boolean(), nullable=True))
    op.add_column('container_snapshots', sa.Column('dead', sa.Boolean(), nullable=True))
    op.add_column('container_snapshots', sa.Column('pid', sa.Integer(), nullable=True))
    op.add_column('container_snapshots', sa.Column('exit_code', sa.Integer(), nullable=True))
    op.add_column('container_snapshots', sa.Column('memory_cache_bytes', sa.BigInteger(), nullable=True))
    op.add_column('container_snapshots', sa.Column('created_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('container_snapshots', sa.Column('started_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('container_snapshots', sa.Column('finished_at', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('container_snapshots', 'ports',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=None,
               existing_nullable=True)
    op.alter_column('container_snapshots', 'environment',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=None,
               existing_nullable=True)
    op.alter_column('container_snapshots', 'labels',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=None,
               existing_nullable=True)
    op.alter_column('container_snapshots', 'volumes',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=None,
               existing_nullable=True)
    op.alter_column('container_snapshots', 'networks',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=None,
               existing_nullable=True)
    op.drop_index(op.f('idx_container_snapshots_container_id'), table_name='container_snapshots')
    op.drop_index(op.f('idx_container_snapshots_container_name'), table_name='container_snapshots')
    op.drop_index(op.f('idx_container_snapshots_device_time'), table_name='container_snapshots')
    op.drop_index(op.f('idx_container_snapshots_environment'), table_name='container_snapshots', postgresql_using='gin')
    op.drop_index(op.f('idx_container_snapshots_labels'), table_name='container_snapshots', postgresql_using='gin')
    op.drop_index(op.f('idx_container_snapshots_state'), table_name='container_snapshots')
    op.drop_index(op.f('idx_container_snapshots_status'), table_name='container_snapshots')
    op.drop_index(op.f('idx_container_snapshots_time'), table_name='container_snapshots')
    op.add_column('devices', sa.Column('mac_address', postgresql.MACADDR(), nullable=True))
    op.add_column('devices', sa.Column('operating_system', sa.String(length=100), nullable=True))
    op.add_column('devices', sa.Column('architecture', sa.String(length=50), nullable=True))
    # Rename ssh_username to ssh_user to preserve existing data
    op.alter_column('devices', 'ssh_username', new_column_name='ssh_user')
    op.add_column('devices', sa.Column('ssh_key_path', sa.Text(), nullable=True))
    op.add_column('devices', sa.Column('environment', sa.String(length=50), nullable=True))
    op.add_column('devices', sa.Column('metadata_info', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('devices', sa.Column('notes', sa.Text(), nullable=True))
    op.alter_column('devices', 'id',
               existing_type=sa.UUID(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('devices', 'ip_address',
               existing_type=postgresql.INET(),
               nullable=False)
    op.alter_column('devices', 'device_type',
               existing_type=sa.VARCHAR(length=50),
               server_default=None,
               nullable=False)
    op.alter_column('devices', 'status',
               existing_type=sa.VARCHAR(length=20),
               server_default=None,
               nullable=False)
    op.alter_column('devices', 'ssh_port',
               existing_type=sa.INTEGER(),
               server_default=None,
               nullable=False)
    op.alter_column('devices', 'tags',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=None,
               type_=sa.ARRAY(sa.String()),
               existing_nullable=True)
    op.alter_column('devices', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('devices', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(op.f('devices_hostname_key'), 'devices', type_='unique')
    op.drop_index(op.f('idx_devices_hostname'), table_name='devices')
    op.drop_index(op.f('idx_devices_ip_address'), table_name='devices')
    op.drop_index(op.f('idx_devices_last_seen'), table_name='devices')
    op.drop_index(op.f('idx_devices_monitoring_enabled'), table_name='devices')
    op.drop_index(op.f('idx_devices_status'), table_name='devices')
    op.drop_index(op.f('idx_devices_tags'), table_name='devices', postgresql_using='gin')
    op.create_index(op.f('ix_devices_hostname'), 'devices', ['hostname'], unique=True)
    op.create_index(op.f('ix_devices_ip_address'), 'devices', ['ip_address'], unique=False)
    op.drop_column('devices', 'description')
    op.drop_column('devices', 'monitoring_enabled')
    op.add_column('docker_networks', sa.Column('ip_range', postgresql.CIDR(), nullable=True))
    op.add_column('docker_networks', sa.Column('is_internal', sa.Boolean(), nullable=True))
    op.add_column('docker_networks', sa.Column('enable_ipv6', sa.Boolean(), nullable=True))
    op.add_column('docker_networks', sa.Column('attachable', sa.Boolean(), nullable=True))
    op.add_column('docker_networks', sa.Column('ingress', sa.Boolean(), nullable=True))
    op.add_column('docker_networks', sa.Column('connected_containers', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('docker_networks', sa.Column('container_count', sa.Integer(), nullable=True))
    op.add_column('docker_networks', sa.Column('driver_options', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('docker_networks', sa.Column('created_at', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('docker_networks', 'time',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               existing_nullable=False)
    op.alter_column('docker_networks', 'labels',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=None,
               existing_nullable=True)
    op.drop_index(op.f('docker_networks_time_idx'), table_name='docker_networks')
    op.drop_index(op.f('idx_docker_networks_device_time'), table_name='docker_networks')
    op.drop_index(op.f('idx_docker_networks_driver'), table_name='docker_networks')
    op.drop_index(op.f('idx_docker_networks_labels'), table_name='docker_networks', postgresql_using='gin')
    op.drop_index(op.f('idx_docker_networks_network_id'), table_name='docker_networks')
    op.drop_index(op.f('idx_docker_networks_network_name'), table_name='docker_networks')
    op.drop_index(op.f('idx_docker_networks_scope'), table_name='docker_networks')
    op.drop_column('docker_networks', 'config')
    op.drop_column('docker_networks', 'options')
    op.drop_column('docker_networks', 'containers_count')
    op.add_column('drive_health', sa.Column('drive_model', sa.String(length=255), nullable=True))
    op.add_column('drive_health', sa.Column('drive_serial', sa.String(length=255), nullable=True))
    op.add_column('drive_health', sa.Column('drive_size_bytes', sa.BigInteger(), nullable=True))
    op.add_column('drive_health', sa.Column('drive_firmware', sa.String(length=100), nullable=True))
    op.add_column('drive_health', sa.Column('smart_overall_health', sa.String(length=50), nullable=True))
    op.add_column('drive_health', sa.Column('power_cycle_count', sa.BigInteger(), nullable=True))
    op.add_column('drive_health', sa.Column('reallocated_events', sa.Integer(), nullable=True))
    op.add_column('drive_health', sa.Column('current_pending_sectors', sa.Integer(), nullable=True))
    op.add_column('drive_health', sa.Column('offline_uncorrectable', sa.Integer(), nullable=True))
    op.add_column('drive_health', sa.Column('wear_leveling_count', sa.Integer(), nullable=True))
    op.add_column('drive_health', sa.Column('used_reserved_blocks', sa.Integer(), nullable=True))
    op.add_column('drive_health', sa.Column('program_fail_count', sa.Integer(), nullable=True))
    op.add_column('drive_health', sa.Column('erase_fail_count', sa.Integer(), nullable=True))
    op.add_column('drive_health', sa.Column('read_error_rate', sa.BigInteger(), nullable=True))
    op.add_column('drive_health', sa.Column('seek_error_rate', sa.BigInteger(), nullable=True))
    op.add_column('drive_health', sa.Column('spin_retry_count', sa.Integer(), nullable=True))
    op.add_column('drive_health', sa.Column('airflow_temperature', sa.Integer(), nullable=True))
    op.add_column('drive_health', sa.Column('g_sense_error_rate', sa.Integer(), nullable=True))
    op.add_column('drive_health', sa.Column('head_flying_hours', sa.BigInteger(), nullable=True))
    op.alter_column('drive_health', 'drive_name',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=255),
               existing_nullable=False)
    op.alter_column('drive_health', 'drive_type',
               existing_type=sa.VARCHAR(length=20),
               type_=sa.String(length=50),
               existing_nullable=True)
    op.alter_column('drive_health', 'power_on_hours',
               existing_type=sa.INTEGER(),
               type_=sa.BigInteger(),
               existing_nullable=True)
    op.alter_column('drive_health', 'smart_attributes',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=None,
               existing_nullable=True)
    op.drop_index(op.f('idx_drive_health_device_time'), table_name='drive_health')
    op.drop_index(op.f('idx_drive_health_drive_name'), table_name='drive_health')
    op.drop_index(op.f('idx_drive_health_health_status'), table_name='drive_health')
    op.drop_index(op.f('idx_drive_health_smart_attrs'), table_name='drive_health', postgresql_using='gin')
    op.drop_index(op.f('idx_drive_health_smart_status'), table_name='drive_health')
    op.drop_index(op.f('idx_drive_health_time'), table_name='drive_health')
    op.drop_column('drive_health', 'pending_sectors')
    op.drop_column('drive_health', 'serial_number')
    op.drop_column('drive_health', 'total_lbas_written')
    op.drop_column('drive_health', 'health_status')
    op.drop_column('drive_health', 'total_lbas_read')
    op.drop_column('drive_health', 'uncorrectable_errors')
    op.drop_column('drive_health', 'model')
    op.drop_column('drive_health', 'capacity_bytes')
    op.add_column('network_interfaces', sa.Column('is_up', sa.Boolean(), nullable=True))
    op.add_column('network_interfaces', sa.Column('is_running', sa.Boolean(), nullable=True))
    op.add_column('network_interfaces', sa.Column('carrier_state', sa.String(length=20), nullable=True))
    op.add_column('network_interfaces', sa.Column('bytes_sent', sa.BigInteger(), nullable=True))
    op.add_column('network_interfaces', sa.Column('bytes_recv', sa.BigInteger(), nullable=True))
    op.add_column('network_interfaces', sa.Column('packets_sent', sa.BigInteger(), nullable=True))
    op.add_column('network_interfaces', sa.Column('packets_recv', sa.BigInteger(), nullable=True))
    op.add_column('network_interfaces', sa.Column('errors_sent', sa.BigInteger(), nullable=True))
    op.add_column('network_interfaces', sa.Column('errors_recv', sa.BigInteger(), nullable=True))
    op.add_column('network_interfaces', sa.Column('drops_sent', sa.BigInteger(), nullable=True))
    op.add_column('network_interfaces', sa.Column('drops_recv', sa.BigInteger(), nullable=True))
    op.add_column('network_interfaces', sa.Column('collisions', sa.BigInteger(), nullable=True))
    op.add_column('network_interfaces', sa.Column('wireless_ssid', sa.String(length=255), nullable=True))
    op.add_column('network_interfaces', sa.Column('wireless_signal_strength', sa.Integer(), nullable=True))
    op.add_column('network_interfaces', sa.Column('wireless_frequency', sa.Numeric(precision=8, scale=3), nullable=True))
    op.add_column('network_interfaces', sa.Column('vlan_id', sa.Integer(), nullable=True))
    op.add_column('network_interfaces', sa.Column('vlan_priority', sa.Integer(), nullable=True))
    op.add_column('network_interfaces', sa.Column('bridge_id', sa.String(length=100), nullable=True))
    op.add_column('network_interfaces', sa.Column('bridge_stp_state', sa.String(length=20), nullable=True))
    op.alter_column('network_interfaces', 'time',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               existing_nullable=False)
    op.alter_column('network_interfaces', 'interface_name',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=255),
               existing_nullable=False)
    op.alter_column('network_interfaces', 'ip_addresses',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=None,
               existing_nullable=True)
    op.drop_index(op.f('idx_network_interfaces_device_time'), table_name='network_interfaces')
    op.drop_index(op.f('idx_network_interfaces_interface_name'), table_name='network_interfaces')
    op.drop_index(op.f('idx_network_interfaces_interface_type'), table_name='network_interfaces')
    op.drop_index(op.f('idx_network_interfaces_ip_addresses'), table_name='network_interfaces', postgresql_using='gin')
    op.drop_index(op.f('idx_network_interfaces_state'), table_name='network_interfaces')
    op.drop_index(op.f('network_interfaces_time_idx'), table_name='network_interfaces')
    op.drop_column('network_interfaces', 'rx_bytes')
    op.drop_column('network_interfaces', 'rx_errors')
    op.drop_column('network_interfaces', 'tx_errors')
    op.drop_column('network_interfaces', 'tx_dropped')
    op.drop_column('network_interfaces', 'state')
    op.drop_column('network_interfaces', 'rx_dropped')
    op.drop_column('network_interfaces', 'tx_bytes')
    op.drop_column('network_interfaces', 'rx_packets')
    op.drop_column('network_interfaces', 'tx_packets')
    op.add_column('system_logs', sa.Column('log_id', sa.String(length=64), nullable=True))
    op.add_column('system_logs', sa.Column('log_source', sa.String(length=255), nullable=True))
    op.add_column('system_logs', sa.Column('severity', sa.String(length=20), nullable=True))
    op.add_column('system_logs', sa.Column('priority', sa.Integer(), nullable=True))
    op.add_column('system_logs', sa.Column('hostname', sa.String(length=255), nullable=True))
    op.add_column('system_logs', sa.Column('parsed_fields', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('system_logs', sa.Column('event_type', sa.String(length=100), nullable=True))
    op.add_column('system_logs', sa.Column('event_category', sa.String(length=100), nullable=True))
    op.add_column('system_logs', sa.Column('occurrence_count', sa.Integer(), nullable=True))
    op.add_column('system_logs', sa.Column('first_occurrence', sa.DateTime(timezone=True), nullable=True))
    op.add_column('system_logs', sa.Column('last_occurrence', sa.DateTime(timezone=True), nullable=True))
    op.add_column('system_logs', sa.Column('correlation_id', sa.String(length=64), nullable=True))
    op.add_column('system_logs', sa.Column('thread_id', sa.String(length=64), nullable=True))
    op.add_column('system_logs', sa.Column('user_id', sa.String(length=255), nullable=True))
    op.add_column('system_logs', sa.Column('is_security_event', sa.Boolean(), nullable=True))
    op.add_column('system_logs', sa.Column('is_error', sa.Boolean(), nullable=True))
    op.add_column('system_logs', sa.Column('alert_triggered', sa.Boolean(), nullable=True))
    op.add_column('system_logs', sa.Column('alert_rule', sa.String(length=255), nullable=True))
    op.add_column('system_logs', sa.Column('log_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('system_logs', sa.Column('tags', sa.ARRAY(sa.String()), nullable=True))
    # Update existing rows with log_id values, then make it NOT NULL
    op.execute("UPDATE system_logs SET log_id = 'log_' || EXTRACT(EPOCH FROM time)::text || '_' || device_id WHERE log_id IS NULL")
    op.alter_column('system_logs', 'log_id',
               existing_type=sa.String(length=64),
               nullable=False)
    op.alter_column('system_logs', 'time',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               existing_nullable=False)
    op.drop_index(op.f('idx_system_logs_device_time'), table_name='system_logs')
    op.drop_index(op.f('idx_system_logs_facility'), table_name='system_logs')
    op.drop_index(op.f('idx_system_logs_log_level'), table_name='system_logs')
    op.drop_index(op.f('idx_system_logs_message_text'), table_name='system_logs', postgresql_using='gin')
    op.drop_index(op.f('idx_system_logs_metadata'), table_name='system_logs', postgresql_using='gin')
    op.drop_index(op.f('idx_system_logs_process_id'), table_name='system_logs')
    op.drop_index(op.f('idx_system_logs_service_name'), table_name='system_logs')
    op.drop_index(op.f('idx_system_logs_source'), table_name='system_logs')
    op.drop_index(op.f('idx_system_logs_time'), table_name='system_logs')
    op.drop_column('system_logs', 'metadata')
    op.drop_column('system_logs', 'source')
    op.drop_column('system_logs', 'user_name')
    op.add_column('system_metrics', sa.Column('cpu_load_1min', sa.Numeric(precision=8, scale=4), nullable=True))
    op.add_column('system_metrics', sa.Column('cpu_load_5min', sa.Numeric(precision=8, scale=4), nullable=True))
    op.add_column('system_metrics', sa.Column('cpu_load_15min', sa.Numeric(precision=8, scale=4), nullable=True))
    op.add_column('system_metrics', sa.Column('cpu_cores', sa.Integer(), nullable=True))
    op.add_column('system_metrics', sa.Column('cpu_temperature', sa.Numeric(precision=5, scale=2), nullable=True))
    op.add_column('system_metrics', sa.Column('memory_used_bytes', sa.BigInteger(), nullable=True))
    op.add_column('system_metrics', sa.Column('memory_cached_bytes', sa.BigInteger(), nullable=True))
    op.add_column('system_metrics', sa.Column('memory_buffers_bytes', sa.BigInteger(), nullable=True))
    op.add_column('system_metrics', sa.Column('swap_total_bytes', sa.BigInteger(), nullable=True))
    op.add_column('system_metrics', sa.Column('swap_used_bytes', sa.BigInteger(), nullable=True))
    op.add_column('system_metrics', sa.Column('disk_read_bytes_total', sa.BigInteger(), nullable=True))
    op.add_column('system_metrics', sa.Column('disk_write_bytes_total', sa.BigInteger(), nullable=True))
    op.add_column('system_metrics', sa.Column('disk_read_ops_total', sa.BigInteger(), nullable=True))
    op.add_column('system_metrics', sa.Column('disk_write_ops_total', sa.BigInteger(), nullable=True))
    op.add_column('system_metrics', sa.Column('network_bytes_sent_total', sa.BigInteger(), nullable=True))
    op.add_column('system_metrics', sa.Column('network_bytes_recv_total', sa.BigInteger(), nullable=True))
    op.add_column('system_metrics', sa.Column('network_packets_sent_total', sa.BigInteger(), nullable=True))
    op.add_column('system_metrics', sa.Column('network_packets_recv_total', sa.BigInteger(), nullable=True))
    op.add_column('system_metrics', sa.Column('network_errors_total', sa.BigInteger(), nullable=True))
    op.add_column('system_metrics', sa.Column('processes_total', sa.Integer(), nullable=True))
    op.add_column('system_metrics', sa.Column('processes_running', sa.Integer(), nullable=True))
    op.add_column('system_metrics', sa.Column('processes_sleeping', sa.Integer(), nullable=True))
    op.add_column('system_metrics', sa.Column('processes_zombie', sa.Integer(), nullable=True))
    op.add_column('system_metrics', sa.Column('boot_time', sa.DateTime(timezone=True), nullable=True))
    op.add_column('system_metrics', sa.Column('users_logged_in', sa.Integer(), nullable=True))
    op.drop_index(op.f('idx_system_metrics_additional'), table_name='system_metrics', postgresql_using='gin')
    op.drop_index(op.f('idx_system_metrics_device_time'), table_name='system_metrics')
    op.drop_index(op.f('idx_system_metrics_time'), table_name='system_metrics')
    op.drop_column('system_metrics', 'memory_usage_percent')
    op.drop_column('system_metrics', 'load_average_15m')
    op.drop_column('system_metrics', 'disk_total_bytes')
    op.drop_column('system_metrics', 'additional_metrics')
    op.drop_column('system_metrics', 'network_bytes_recv')
    op.drop_column('system_metrics', 'load_average_1m')
    op.drop_column('system_metrics', 'process_count')
    op.drop_column('system_metrics', 'load_average_5m')
    op.drop_column('system_metrics', 'network_bytes_sent')
    op.add_column('system_updates', sa.Column('time', sa.DateTime(timezone=True), nullable=True, server_default=sa.text('now()')))
    op.add_column('system_updates', sa.Column('update_id', sa.String(length=255), nullable=True))
    op.add_column('system_updates', sa.Column('update_type', sa.String(length=50), nullable=True))
    op.add_column('system_updates', sa.Column('severity', sa.String(length=20), nullable=True))
    op.add_column('system_updates', sa.Column('category', sa.String(length=100), nullable=True))
    op.add_column('system_updates', sa.Column('is_security_update', sa.Boolean(), nullable=True))
    op.add_column('system_updates', sa.Column('requires_reboot', sa.Boolean(), nullable=True))
    op.add_column('system_updates', sa.Column('is_auto_update', sa.Boolean(), nullable=True))
    op.add_column('system_updates', sa.Column('install_date', sa.DateTime(timezone=True), nullable=True))
    op.add_column('system_updates', sa.Column('install_duration_seconds', sa.Integer(), nullable=True))
    op.add_column('system_updates', sa.Column('download_size_bytes', sa.BigInteger(), nullable=True))
    op.add_column('system_updates', sa.Column('install_size_bytes', sa.BigInteger(), nullable=True))
    op.add_column('system_updates', sa.Column('dependencies', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('system_updates', sa.Column('repository', sa.String(length=255), nullable=True))
    op.add_column('system_updates', sa.Column('repository_url', sa.String(length=255), nullable=True))
    op.add_column('system_updates', sa.Column('maintainer', sa.String(length=255), nullable=True))
    op.add_column('system_updates', sa.Column('cve_numbers', sa.ARRAY(sa.String()), nullable=True))
    op.add_column('system_updates', sa.Column('signature_valid', sa.Boolean(), nullable=True))
    op.add_column('system_updates', sa.Column('checksum', sa.String(length=255), nullable=True))
    op.add_column('system_updates', sa.Column('checksum_algorithm', sa.String(length=50), nullable=True))
    op.add_column('system_updates', sa.Column('error_code', sa.Integer(), nullable=True))
    op.add_column('system_updates', sa.Column('error_message', sa.Text(), nullable=True))
    op.add_column('system_updates', sa.Column('retry_count', sa.Integer(), nullable=True))
    op.add_column('system_updates', sa.Column('update_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('system_updates', sa.Column('tags', sa.ARRAY(sa.String()), nullable=True))
    # Update existing rows with update_id values, then make columns NOT NULL
    op.execute("UPDATE system_updates SET update_id = 'update_' || EXTRACT(EPOCH FROM COALESCE(time, NOW()))::text || '_' || device_id WHERE update_id IS NULL")
    op.alter_column('system_updates', 'time',
               existing_type=sa.DateTime(timezone=True),
               nullable=False,
               server_default=None)
    op.alter_column('system_updates', 'update_id',
               existing_type=sa.String(length=255),
               nullable=False)
    op.alter_column('system_updates', 'package_type',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
    op.alter_column('system_updates', 'update_status',
               existing_type=sa.VARCHAR(length=50),
               server_default=None,
               existing_nullable=True)
    op.drop_index(op.f('idx_system_updates_device_id'), table_name='system_updates')
    op.drop_index(op.f('idx_system_updates_last_checked'), table_name='system_updates')
    op.drop_index(op.f('idx_system_updates_metadata'), table_name='system_updates', postgresql_using='gin')
    op.drop_index(op.f('idx_system_updates_package_name'), table_name='system_updates')
    op.drop_index(op.f('idx_system_updates_package_type'), table_name='system_updates')
    op.drop_index(op.f('idx_system_updates_security_update'), table_name='system_updates')
    op.drop_index(op.f('idx_system_updates_update_priority'), table_name='system_updates')
    op.drop_index(op.f('idx_system_updates_update_status'), table_name='system_updates')
    op.drop_column('system_updates', 'last_checked')
    op.drop_column('system_updates', 'id')
    op.drop_column('system_updates', 'metadata')
    op.drop_column('system_updates', 'security_update')
    op.drop_column('system_updates', 'update_priority')
    op.add_column('vm_status', sa.Column('vm_type', sa.String(length=50), nullable=True))
    op.add_column('vm_status', sa.Column('vm_state', sa.String(length=50), nullable=True))
    op.add_column('vm_status', sa.Column('vm_power_state', sa.String(length=50), nullable=True))
    op.add_column('vm_status', sa.Column('cpu_cores', sa.Integer(), nullable=True))
    op.add_column('vm_status', sa.Column('memory_allocated_mb', sa.BigInteger(), nullable=True))
    op.add_column('vm_status', sa.Column('disk_allocated_gb', sa.BigInteger(), nullable=True))
    op.add_column('vm_status', sa.Column('disk_usage_gb', sa.BigInteger(), nullable=True))
    op.add_column('vm_status', sa.Column('network_interfaces', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('vm_status', sa.Column('ip_addresses', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('vm_status', sa.Column('os_type', sa.String(length=100), nullable=True))
    op.add_column('vm_status', sa.Column('os_version', sa.String(length=100), nullable=True))
    op.add_column('vm_status', sa.Column('tools_version', sa.String(length=100), nullable=True))
    op.add_column('vm_status', sa.Column('tools_running', sa.Boolean(), nullable=True))
    op.add_column('vm_status', sa.Column('created_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('vm_status', sa.Column('snapshot_count', sa.Integer(), nullable=True))
    op.add_column('vm_status', sa.Column('last_snapshot_time', sa.DateTime(timezone=True), nullable=True))
    op.add_column('vm_status', sa.Column('vm_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('vm_status', sa.Column('tags', sa.ARRAY(sa.String()), nullable=True))
    op.alter_column('vm_status', 'time',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               existing_nullable=False)
    op.alter_column('vm_status', 'memory_usage_mb',
               existing_type=sa.INTEGER(),
               type_=sa.BigInteger(),
               existing_nullable=True)
    op.drop_index(op.f('idx_vm_status_config'), table_name='vm_status', postgresql_using='gin')
    op.drop_index(op.f('idx_vm_status_device_time'), table_name='vm_status')
    op.drop_index(op.f('idx_vm_status_hypervisor'), table_name='vm_status')
    op.drop_index(op.f('idx_vm_status_status'), table_name='vm_status')
    op.drop_index(op.f('idx_vm_status_time'), table_name='vm_status')
    op.drop_index(op.f('idx_vm_status_vm_id'), table_name='vm_status')
    op.drop_index(op.f('idx_vm_status_vm_name'), table_name='vm_status')
    op.drop_column('vm_status', 'config')
    op.drop_column('vm_status', 'vcpus')
    op.drop_column('vm_status', 'network_bytes_recv')
    op.drop_column('vm_status', 'memory_mb')
    op.drop_column('vm_status', 'network_bytes_sent')
    op.drop_column('vm_status', 'status')
    op.drop_column('vm_status', 'disk_usage_bytes')
    op.add_column('zfs_snapshots', sa.Column('pool_name', sa.String(length=255), nullable=False))
    op.add_column('zfs_snapshots', sa.Column('snapshot_guid', sa.String(length=100), nullable=True))
    op.add_column('zfs_snapshots', sa.Column('compressed_bytes', sa.BigInteger(), nullable=True))
    op.add_column('zfs_snapshots', sa.Column('uncompressed_bytes', sa.BigInteger(), nullable=True))
    op.add_column('zfs_snapshots', sa.Column('snapshot_type', sa.String(length=50), nullable=True))
    op.add_column('zfs_snapshots', sa.Column('retention_policy', sa.String(length=100), nullable=True))
    op.add_column('zfs_snapshots', sa.Column('snapshot_properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('zfs_snapshots', sa.Column('backup_status', sa.String(length=50), nullable=True))
    op.add_column('zfs_snapshots', sa.Column('replication_status', sa.String(length=50), nullable=True))
    op.add_column('zfs_snapshots', sa.Column('last_backup_time', sa.DateTime(timezone=True), nullable=True))
    op.add_column('zfs_snapshots', sa.Column('backup_destination', sa.String(length=255), nullable=True))
    op.add_column('zfs_snapshots', sa.Column('is_cloned', sa.Boolean(), nullable=True))
    op.add_column('zfs_snapshots', sa.Column('clone_count', sa.Integer(), nullable=True))
    op.add_column('zfs_snapshots', sa.Column('is_held', sa.Boolean(), nullable=True))
    op.add_column('zfs_snapshots', sa.Column('hold_tag', sa.String(length=255), nullable=True))
    op.alter_column('zfs_snapshots', 'time',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               existing_nullable=False)
    op.alter_column('zfs_snapshots', 'creation_time',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True)
    op.drop_index(op.f('idx_zfs_snapshots_creation_time'), table_name='zfs_snapshots')
    op.drop_index(op.f('idx_zfs_snapshots_dataset'), table_name='zfs_snapshots')
    op.drop_index(op.f('idx_zfs_snapshots_device_time'), table_name='zfs_snapshots')
    op.drop_index(op.f('idx_zfs_snapshots_properties'), table_name='zfs_snapshots', postgresql_using='gin')
    op.drop_index(op.f('zfs_snapshots_time_idx'), table_name='zfs_snapshots')
    op.drop_column('zfs_snapshots', 'properties')
    op.add_column('zfs_status', sa.Column('pool_guid', sa.String(length=100), nullable=True))
    op.add_column('zfs_status', sa.Column('pool_size_bytes', sa.BigInteger(), nullable=True))
    op.add_column('zfs_status', sa.Column('pool_allocated_bytes', sa.BigInteger(), nullable=True))
    op.add_column('zfs_status', sa.Column('pool_free_bytes', sa.BigInteger(), nullable=True))
    op.add_column('zfs_status', sa.Column('pool_fragmentation_percent', sa.Numeric(precision=5, scale=2), nullable=True))
    op.add_column('zfs_status', sa.Column('pool_capacity_percent', sa.Numeric(precision=5, scale=2), nullable=True))
    op.add_column('zfs_status', sa.Column('read_ops_total', sa.BigInteger(), nullable=True))
    op.add_column('zfs_status', sa.Column('write_ops_total', sa.BigInteger(), nullable=True))
    op.add_column('zfs_status', sa.Column('read_bytes_total', sa.BigInteger(), nullable=True))
    op.add_column('zfs_status', sa.Column('write_bytes_total', sa.BigInteger(), nullable=True))
    op.add_column('zfs_status', sa.Column('scrub_start_time', sa.DateTime(timezone=True), nullable=True))
    op.add_column('zfs_status', sa.Column('scrub_end_time', sa.DateTime(timezone=True), nullable=True))
    op.add_column('zfs_status', sa.Column('scrub_examined_bytes', sa.BigInteger(), nullable=True))
    op.add_column('zfs_status', sa.Column('scrub_processed_bytes', sa.BigInteger(), nullable=True))
    op.add_column('zfs_status', sa.Column('scrub_repaired_bytes', sa.BigInteger(), nullable=True))
    op.add_column('zfs_status', sa.Column('read_errors', sa.Integer(), nullable=True))
    op.add_column('zfs_status', sa.Column('write_errors', sa.Integer(), nullable=True))
    op.add_column('zfs_status', sa.Column('checksum_errors', sa.Integer(), nullable=True))
    op.add_column('zfs_status', sa.Column('pool_version', sa.Integer(), nullable=True))
    op.add_column('zfs_status', sa.Column('feature_flags', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('zfs_status', sa.Column('pool_properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('zfs_status', sa.Column('dataset_type', sa.String(length=50), nullable=True))
    op.add_column('zfs_status', sa.Column('dataset_used_bytes', sa.BigInteger(), nullable=True))
    op.add_column('zfs_status', sa.Column('dataset_available_bytes', sa.BigInteger(), nullable=True))
    op.add_column('zfs_status', sa.Column('dataset_referenced_bytes', sa.BigInteger(), nullable=True))
    op.add_column('zfs_status', sa.Column('dataset_compression_ratio', sa.Numeric(precision=8, scale=4), nullable=True))
    op.add_column('zfs_status', sa.Column('dataset_properties', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.alter_column('zfs_status', 'time',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=None,
               existing_nullable=False)
    op.alter_column('zfs_status', 'scrub_errors',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=True)
    op.drop_index(op.f('idx_zfs_status_device_time'), table_name='zfs_status')
    op.drop_index(op.f('idx_zfs_status_pool_health'), table_name='zfs_status')
    op.drop_index(op.f('idx_zfs_status_pool_name'), table_name='zfs_status')
    op.drop_index(op.f('idx_zfs_status_pool_state'), table_name='zfs_status')
    op.drop_index(op.f('idx_zfs_status_properties'), table_name='zfs_status', postgresql_using='gin')
    op.drop_index(op.f('idx_zfs_status_scrub_state'), table_name='zfs_status')
    op.drop_index(op.f('idx_zfs_status_time'), table_name='zfs_status')
    op.drop_column('zfs_status', 'allocated_bytes')
    op.drop_column('zfs_status', 'fragmentation_percent')
    op.drop_column('zfs_status', 'properties')
    op.drop_column('zfs_status', 'dedup_ratio')
    op.drop_column('zfs_status', 'compression_ratio')
    op.drop_column('zfs_status', 'scrub_progress_percent')
    op.drop_column('zfs_status', 'free_bytes')
    op.drop_column('zfs_status', 'last_scrub')
    op.drop_column('zfs_status', 'capacity_bytes')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('zfs_status', sa.Column('capacity_bytes', sa.BIGINT(), autoincrement=False, nullable=True))
    op.add_column('zfs_status', sa.Column('last_scrub', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('zfs_status', sa.Column('free_bytes', sa.BIGINT(), autoincrement=False, nullable=True))
    op.add_column('zfs_status', sa.Column('scrub_progress_percent', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True))
    op.add_column('zfs_status', sa.Column('compression_ratio', sa.NUMERIC(precision=6, scale=2), autoincrement=False, nullable=True))
    op.add_column('zfs_status', sa.Column('dedup_ratio', sa.NUMERIC(precision=6, scale=2), autoincrement=False, nullable=True))
    op.add_column('zfs_status', sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.add_column('zfs_status', sa.Column('fragmentation_percent', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True))
    op.add_column('zfs_status', sa.Column('allocated_bytes', sa.BIGINT(), autoincrement=False, nullable=True))
    op.create_index(op.f('idx_zfs_status_time'), 'zfs_status', [sa.literal_column('time DESC')], unique=False)
    op.create_index(op.f('idx_zfs_status_scrub_state'), 'zfs_status', ['scrub_state'], unique=False)
    op.create_index(op.f('idx_zfs_status_properties'), 'zfs_status', ['properties'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_zfs_status_pool_state'), 'zfs_status', ['pool_state'], unique=False)
    op.create_index(op.f('idx_zfs_status_pool_name'), 'zfs_status', ['pool_name'], unique=False)
    op.create_index(op.f('idx_zfs_status_pool_health'), 'zfs_status', ['pool_health'], unique=False)
    op.create_index(op.f('idx_zfs_status_device_time'), 'zfs_status', ['device_id', sa.literal_column('time DESC')], unique=False)
    op.alter_column('zfs_status', 'scrub_errors',
               existing_type=sa.INTEGER(),
               server_default=sa.text('0'),
               existing_nullable=True)
    op.alter_column('zfs_status', 'time',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               existing_nullable=False)
    op.drop_column('zfs_status', 'dataset_properties')
    op.drop_column('zfs_status', 'dataset_compression_ratio')
    op.drop_column('zfs_status', 'dataset_referenced_bytes')
    op.drop_column('zfs_status', 'dataset_available_bytes')
    op.drop_column('zfs_status', 'dataset_used_bytes')
    op.drop_column('zfs_status', 'dataset_type')
    op.drop_column('zfs_status', 'pool_properties')
    op.drop_column('zfs_status', 'feature_flags')
    op.drop_column('zfs_status', 'pool_version')
    op.drop_column('zfs_status', 'checksum_errors')
    op.drop_column('zfs_status', 'write_errors')
    op.drop_column('zfs_status', 'read_errors')
    op.drop_column('zfs_status', 'scrub_repaired_bytes')
    op.drop_column('zfs_status', 'scrub_processed_bytes')
    op.drop_column('zfs_status', 'scrub_examined_bytes')
    op.drop_column('zfs_status', 'scrub_end_time')
    op.drop_column('zfs_status', 'scrub_start_time')
    op.drop_column('zfs_status', 'write_bytes_total')
    op.drop_column('zfs_status', 'read_bytes_total')
    op.drop_column('zfs_status', 'write_ops_total')
    op.drop_column('zfs_status', 'read_ops_total')
    op.drop_column('zfs_status', 'pool_capacity_percent')
    op.drop_column('zfs_status', 'pool_fragmentation_percent')
    op.drop_column('zfs_status', 'pool_free_bytes')
    op.drop_column('zfs_status', 'pool_allocated_bytes')
    op.drop_column('zfs_status', 'pool_size_bytes')
    op.drop_column('zfs_status', 'pool_guid')
    op.add_column('zfs_snapshots', sa.Column('properties', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.create_index(op.f('zfs_snapshots_time_idx'), 'zfs_snapshots', [sa.literal_column('time DESC')], unique=False)
    op.create_index(op.f('idx_zfs_snapshots_properties'), 'zfs_snapshots', ['properties'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_zfs_snapshots_device_time'), 'zfs_snapshots', ['device_id', sa.literal_column('time DESC')], unique=False)
    op.create_index(op.f('idx_zfs_snapshots_dataset'), 'zfs_snapshots', ['dataset_name'], unique=False)
    op.create_index(op.f('idx_zfs_snapshots_creation_time'), 'zfs_snapshots', [sa.literal_column('creation_time DESC')], unique=False)
    op.alter_column('zfs_snapshots', 'creation_time',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False)
    op.alter_column('zfs_snapshots', 'time',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               existing_nullable=False)
    op.drop_column('zfs_snapshots', 'hold_tag')
    op.drop_column('zfs_snapshots', 'is_held')
    op.drop_column('zfs_snapshots', 'clone_count')
    op.drop_column('zfs_snapshots', 'is_cloned')
    op.drop_column('zfs_snapshots', 'backup_destination')
    op.drop_column('zfs_snapshots', 'last_backup_time')
    op.drop_column('zfs_snapshots', 'replication_status')
    op.drop_column('zfs_snapshots', 'backup_status')
    op.drop_column('zfs_snapshots', 'snapshot_properties')
    op.drop_column('zfs_snapshots', 'retention_policy')
    op.drop_column('zfs_snapshots', 'snapshot_type')
    op.drop_column('zfs_snapshots', 'uncompressed_bytes')
    op.drop_column('zfs_snapshots', 'compressed_bytes')
    op.drop_column('zfs_snapshots', 'snapshot_guid')
    op.drop_column('zfs_snapshots', 'pool_name')
    op.add_column('vm_status', sa.Column('disk_usage_bytes', sa.BIGINT(), autoincrement=False, nullable=True))
    op.add_column('vm_status', sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.add_column('vm_status', sa.Column('network_bytes_sent', sa.BIGINT(), autoincrement=False, nullable=True))
    op.add_column('vm_status', sa.Column('memory_mb', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('vm_status', sa.Column('network_bytes_recv', sa.BIGINT(), autoincrement=False, nullable=True))
    op.add_column('vm_status', sa.Column('vcpus', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('vm_status', sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.create_index(op.f('idx_vm_status_vm_name'), 'vm_status', ['vm_name'], unique=False)
    op.create_index(op.f('idx_vm_status_vm_id'), 'vm_status', ['vm_id'], unique=False)
    op.create_index(op.f('idx_vm_status_time'), 'vm_status', [sa.literal_column('time DESC')], unique=False)
    op.create_index(op.f('idx_vm_status_status'), 'vm_status', ['status'], unique=False)
    op.create_index(op.f('idx_vm_status_hypervisor'), 'vm_status', ['hypervisor'], unique=False)
    op.create_index(op.f('idx_vm_status_device_time'), 'vm_status', ['device_id', sa.literal_column('time DESC')], unique=False)
    op.create_index(op.f('idx_vm_status_config'), 'vm_status', ['config'], unique=False, postgresql_using='gin')
    op.alter_column('vm_status', 'memory_usage_mb',
               existing_type=sa.BigInteger(),
               type_=sa.INTEGER(),
               existing_nullable=True)
    op.alter_column('vm_status', 'time',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               existing_nullable=False)
    op.drop_column('vm_status', 'tags')
    op.drop_column('vm_status', 'vm_metadata')
    op.drop_column('vm_status', 'last_snapshot_time')
    op.drop_column('vm_status', 'snapshot_count')
    op.drop_column('vm_status', 'created_at')
    op.drop_column('vm_status', 'tools_running')
    op.drop_column('vm_status', 'tools_version')
    op.drop_column('vm_status', 'os_version')
    op.drop_column('vm_status', 'os_type')
    op.drop_column('vm_status', 'ip_addresses')
    op.drop_column('vm_status', 'network_interfaces')
    op.drop_column('vm_status', 'disk_usage_gb')
    op.drop_column('vm_status', 'disk_allocated_gb')
    op.drop_column('vm_status', 'memory_allocated_mb')
    op.drop_column('vm_status', 'cpu_cores')
    op.drop_column('vm_status', 'vm_power_state')
    op.drop_column('vm_status', 'vm_state')
    op.drop_column('vm_status', 'vm_type')
    op.add_column('system_updates', sa.Column('update_priority', sa.VARCHAR(length=20), server_default=sa.text("'normal'::character varying"), autoincrement=False, nullable=True))
    op.add_column('system_updates', sa.Column('security_update', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.add_column('system_updates', sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.add_column('system_updates', sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False))
    op.add_column('system_updates', sa.Column('last_checked', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.create_index(op.f('idx_system_updates_update_status'), 'system_updates', ['update_status'], unique=False)
    op.create_index(op.f('idx_system_updates_update_priority'), 'system_updates', ['update_priority'], unique=False)
    op.create_index(op.f('idx_system_updates_security_update'), 'system_updates', ['security_update'], unique=False)
    op.create_index(op.f('idx_system_updates_package_type'), 'system_updates', ['package_type'], unique=False)
    op.create_index(op.f('idx_system_updates_package_name'), 'system_updates', ['package_name'], unique=False)
    op.create_index(op.f('idx_system_updates_metadata'), 'system_updates', ['metadata'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_system_updates_last_checked'), 'system_updates', [sa.literal_column('last_checked DESC')], unique=False)
    op.create_index(op.f('idx_system_updates_device_id'), 'system_updates', ['device_id'], unique=False)
    op.alter_column('system_updates', 'update_status',
               existing_type=sa.VARCHAR(length=50),
               server_default=sa.text("'available'::character varying"),
               existing_nullable=True)
    op.alter_column('system_updates', 'package_type',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
    op.drop_column('system_updates', 'tags')
    op.drop_column('system_updates', 'update_metadata')
    op.drop_column('system_updates', 'retry_count')
    op.drop_column('system_updates', 'error_message')
    op.drop_column('system_updates', 'error_code')
    op.drop_column('system_updates', 'checksum_algorithm')
    op.drop_column('system_updates', 'checksum')
    op.drop_column('system_updates', 'signature_valid')
    op.drop_column('system_updates', 'cve_numbers')
    op.drop_column('system_updates', 'maintainer')
    op.drop_column('system_updates', 'repository_url')
    op.drop_column('system_updates', 'repository')
    op.drop_column('system_updates', 'dependencies')
    op.drop_column('system_updates', 'install_size_bytes')
    op.drop_column('system_updates', 'download_size_bytes')
    op.drop_column('system_updates', 'install_duration_seconds')
    op.drop_column('system_updates', 'install_date')
    op.drop_column('system_updates', 'is_auto_update')
    op.drop_column('system_updates', 'requires_reboot')
    op.drop_column('system_updates', 'is_security_update')
    op.drop_column('system_updates', 'category')
    op.drop_column('system_updates', 'severity')
    op.drop_column('system_updates', 'update_type')
    op.drop_column('system_updates', 'update_id')
    op.drop_column('system_updates', 'time')
    op.add_column('system_metrics', sa.Column('network_bytes_sent', sa.BIGINT(), autoincrement=False, nullable=True))
    op.add_column('system_metrics', sa.Column('load_average_5m', sa.NUMERIC(precision=6, scale=2), autoincrement=False, nullable=True))
    op.add_column('system_metrics', sa.Column('process_count', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('system_metrics', sa.Column('load_average_1m', sa.NUMERIC(precision=6, scale=2), autoincrement=False, nullable=True))
    op.add_column('system_metrics', sa.Column('network_bytes_recv', sa.BIGINT(), autoincrement=False, nullable=True))
    op.add_column('system_metrics', sa.Column('additional_metrics', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.add_column('system_metrics', sa.Column('disk_total_bytes', sa.BIGINT(), autoincrement=False, nullable=True))
    op.add_column('system_metrics', sa.Column('load_average_15m', sa.NUMERIC(precision=6, scale=2), autoincrement=False, nullable=True))
    op.add_column('system_metrics', sa.Column('memory_usage_percent', sa.NUMERIC(precision=5, scale=2), autoincrement=False, nullable=True))
    op.create_index(op.f('idx_system_metrics_time'), 'system_metrics', [sa.literal_column('time DESC')], unique=False)
    op.create_index(op.f('idx_system_metrics_device_time'), 'system_metrics', ['device_id', sa.literal_column('time DESC')], unique=False)
    op.create_index(op.f('idx_system_metrics_additional'), 'system_metrics', ['additional_metrics'], unique=False, postgresql_using='gin')
    op.drop_column('system_metrics', 'users_logged_in')
    op.drop_column('system_metrics', 'boot_time')
    op.drop_column('system_metrics', 'processes_zombie')
    op.drop_column('system_metrics', 'processes_sleeping')
    op.drop_column('system_metrics', 'processes_running')
    op.drop_column('system_metrics', 'processes_total')
    op.drop_column('system_metrics', 'network_errors_total')
    op.drop_column('system_metrics', 'network_packets_recv_total')
    op.drop_column('system_metrics', 'network_packets_sent_total')
    op.drop_column('system_metrics', 'network_bytes_recv_total')
    op.drop_column('system_metrics', 'network_bytes_sent_total')
    op.drop_column('system_metrics', 'disk_write_ops_total')
    op.drop_column('system_metrics', 'disk_read_ops_total')
    op.drop_column('system_metrics', 'disk_write_bytes_total')
    op.drop_column('system_metrics', 'disk_read_bytes_total')
    op.drop_column('system_metrics', 'swap_used_bytes')
    op.drop_column('system_metrics', 'swap_total_bytes')
    op.drop_column('system_metrics', 'memory_buffers_bytes')
    op.drop_column('system_metrics', 'memory_cached_bytes')
    op.drop_column('system_metrics', 'memory_used_bytes')
    op.drop_column('system_metrics', 'cpu_temperature')
    op.drop_column('system_metrics', 'cpu_cores')
    op.drop_column('system_metrics', 'cpu_load_15min')
    op.drop_column('system_metrics', 'cpu_load_5min')
    op.drop_column('system_metrics', 'cpu_load_1min')
    op.add_column('system_logs', sa.Column('user_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('system_logs', sa.Column('source', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('system_logs', sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.create_index(op.f('idx_system_logs_time'), 'system_logs', [sa.literal_column('time DESC')], unique=False)
    op.create_index(op.f('idx_system_logs_source'), 'system_logs', ['source'], unique=False)
    op.create_index(op.f('idx_system_logs_service_name'), 'system_logs', ['service_name'], unique=False)
    op.create_index(op.f('idx_system_logs_process_id'), 'system_logs', ['process_id'], unique=False)
    op.create_index(op.f('idx_system_logs_metadata'), 'system_logs', ['metadata'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_system_logs_message_text'), 'system_logs', [sa.literal_column("to_tsvector('english'::regconfig, message)")], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_system_logs_log_level'), 'system_logs', ['log_level'], unique=False)
    op.create_index(op.f('idx_system_logs_facility'), 'system_logs', ['facility'], unique=False)
    op.create_index(op.f('idx_system_logs_device_time'), 'system_logs', ['device_id', sa.literal_column('time DESC')], unique=False)
    op.alter_column('system_logs', 'time',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               existing_nullable=False)
    op.drop_column('system_logs', 'tags')
    op.drop_column('system_logs', 'log_metadata')
    op.drop_column('system_logs', 'alert_rule')
    op.drop_column('system_logs', 'alert_triggered')
    op.drop_column('system_logs', 'is_error')
    op.drop_column('system_logs', 'is_security_event')
    op.drop_column('system_logs', 'user_id')
    op.drop_column('system_logs', 'thread_id')
    op.drop_column('system_logs', 'correlation_id')
    op.drop_column('system_logs', 'last_occurrence')
    op.drop_column('system_logs', 'first_occurrence')
    op.drop_column('system_logs', 'occurrence_count')
    op.drop_column('system_logs', 'event_category')
    op.drop_column('system_logs', 'event_type')
    op.drop_column('system_logs', 'parsed_fields')
    op.drop_column('system_logs', 'hostname')
    op.drop_column('system_logs', 'priority')
    op.drop_column('system_logs', 'severity')
    op.drop_column('system_logs', 'log_source')
    op.drop_column('system_logs', 'log_id')
    op.add_column('network_interfaces', sa.Column('tx_packets', sa.BIGINT(), autoincrement=False, nullable=True))
    op.add_column('network_interfaces', sa.Column('rx_packets', sa.BIGINT(), autoincrement=False, nullable=True))
    op.add_column('network_interfaces', sa.Column('tx_bytes', sa.BIGINT(), autoincrement=False, nullable=True))
    op.add_column('network_interfaces', sa.Column('rx_dropped', sa.BIGINT(), autoincrement=False, nullable=True))
    op.add_column('network_interfaces', sa.Column('state', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
    op.add_column('network_interfaces', sa.Column('tx_dropped', sa.BIGINT(), autoincrement=False, nullable=True))
    op.add_column('network_interfaces', sa.Column('tx_errors', sa.BIGINT(), autoincrement=False, nullable=True))
    op.add_column('network_interfaces', sa.Column('rx_errors', sa.BIGINT(), autoincrement=False, nullable=True))
    op.add_column('network_interfaces', sa.Column('rx_bytes', sa.BIGINT(), autoincrement=False, nullable=True))
    op.create_index(op.f('network_interfaces_time_idx'), 'network_interfaces', [sa.literal_column('time DESC')], unique=False)
    op.create_index(op.f('idx_network_interfaces_state'), 'network_interfaces', ['state'], unique=False)
    op.create_index(op.f('idx_network_interfaces_ip_addresses'), 'network_interfaces', ['ip_addresses'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_network_interfaces_interface_type'), 'network_interfaces', ['interface_type'], unique=False)
    op.create_index(op.f('idx_network_interfaces_interface_name'), 'network_interfaces', ['interface_name'], unique=False)
    op.create_index(op.f('idx_network_interfaces_device_time'), 'network_interfaces', ['device_id', sa.literal_column('time DESC')], unique=False)
    op.alter_column('network_interfaces', 'ip_addresses',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=sa.text("'[]'::jsonb"),
               existing_nullable=True)
    op.alter_column('network_interfaces', 'interface_name',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)
    op.alter_column('network_interfaces', 'time',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               existing_nullable=False)
    op.drop_column('network_interfaces', 'bridge_stp_state')
    op.drop_column('network_interfaces', 'bridge_id')
    op.drop_column('network_interfaces', 'vlan_priority')
    op.drop_column('network_interfaces', 'vlan_id')
    op.drop_column('network_interfaces', 'wireless_frequency')
    op.drop_column('network_interfaces', 'wireless_signal_strength')
    op.drop_column('network_interfaces', 'wireless_ssid')
    op.drop_column('network_interfaces', 'collisions')
    op.drop_column('network_interfaces', 'drops_recv')
    op.drop_column('network_interfaces', 'drops_sent')
    op.drop_column('network_interfaces', 'errors_recv')
    op.drop_column('network_interfaces', 'errors_sent')
    op.drop_column('network_interfaces', 'packets_recv')
    op.drop_column('network_interfaces', 'packets_sent')
    op.drop_column('network_interfaces', 'bytes_recv')
    op.drop_column('network_interfaces', 'bytes_sent')
    op.drop_column('network_interfaces', 'carrier_state')
    op.drop_column('network_interfaces', 'is_running')
    op.drop_column('network_interfaces', 'is_up')
    op.add_column('drive_health', sa.Column('capacity_bytes', sa.BIGINT(), autoincrement=False, nullable=True))
    op.add_column('drive_health', sa.Column('model', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('drive_health', sa.Column('uncorrectable_errors', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('drive_health', sa.Column('total_lbas_read', sa.BIGINT(), autoincrement=False, nullable=True))
    op.add_column('drive_health', sa.Column('health_status', sa.VARCHAR(length=20), server_default=sa.text("'unknown'::character varying"), autoincrement=False, nullable=True))
    op.add_column('drive_health', sa.Column('total_lbas_written', sa.BIGINT(), autoincrement=False, nullable=True))
    op.add_column('drive_health', sa.Column('serial_number', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('drive_health', sa.Column('pending_sectors', sa.INTEGER(), autoincrement=False, nullable=True))
    op.create_index(op.f('idx_drive_health_time'), 'drive_health', [sa.literal_column('time DESC')], unique=False)
    op.create_index(op.f('idx_drive_health_smart_status'), 'drive_health', ['smart_status'], unique=False)
    op.create_index(op.f('idx_drive_health_smart_attrs'), 'drive_health', ['smart_attributes'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_drive_health_health_status'), 'drive_health', ['health_status'], unique=False)
    op.create_index(op.f('idx_drive_health_drive_name'), 'drive_health', ['drive_name'], unique=False)
    op.create_index(op.f('idx_drive_health_device_time'), 'drive_health', ['device_id', sa.literal_column('time DESC')], unique=False)
    op.alter_column('drive_health', 'smart_attributes',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=sa.text("'{}'::jsonb"),
               existing_nullable=True)
    op.alter_column('drive_health', 'power_on_hours',
               existing_type=sa.BigInteger(),
               type_=sa.INTEGER(),
               existing_nullable=True)
    op.alter_column('drive_health', 'drive_type',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=20),
               existing_nullable=True)
    op.alter_column('drive_health', 'drive_name',
               existing_type=sa.String(length=255),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)
    op.drop_column('drive_health', 'head_flying_hours')
    op.drop_column('drive_health', 'g_sense_error_rate')
    op.drop_column('drive_health', 'airflow_temperature')
    op.drop_column('drive_health', 'spin_retry_count')
    op.drop_column('drive_health', 'seek_error_rate')
    op.drop_column('drive_health', 'read_error_rate')
    op.drop_column('drive_health', 'erase_fail_count')
    op.drop_column('drive_health', 'program_fail_count')
    op.drop_column('drive_health', 'used_reserved_blocks')
    op.drop_column('drive_health', 'wear_leveling_count')
    op.drop_column('drive_health', 'offline_uncorrectable')
    op.drop_column('drive_health', 'current_pending_sectors')
    op.drop_column('drive_health', 'reallocated_events')
    op.drop_column('drive_health', 'power_cycle_count')
    op.drop_column('drive_health', 'smart_overall_health')
    op.drop_column('drive_health', 'drive_firmware')
    op.drop_column('drive_health', 'drive_size_bytes')
    op.drop_column('drive_health', 'drive_serial')
    op.drop_column('drive_health', 'drive_model')
    op.add_column('docker_networks', sa.Column('containers_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True))
    op.add_column('docker_networks', sa.Column('options', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.add_column('docker_networks', sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.create_index(op.f('idx_docker_networks_scope'), 'docker_networks', ['scope'], unique=False)
    op.create_index(op.f('idx_docker_networks_network_name'), 'docker_networks', ['network_name'], unique=False)
    op.create_index(op.f('idx_docker_networks_network_id'), 'docker_networks', ['network_id'], unique=False)
    op.create_index(op.f('idx_docker_networks_labels'), 'docker_networks', ['labels'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_docker_networks_driver'), 'docker_networks', ['driver'], unique=False)
    op.create_index(op.f('idx_docker_networks_device_time'), 'docker_networks', ['device_id', sa.literal_column('time DESC')], unique=False)
    op.create_index(op.f('docker_networks_time_idx'), 'docker_networks', [sa.literal_column('time DESC')], unique=False)
    op.alter_column('docker_networks', 'labels',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=sa.text("'{}'::jsonb"),
               existing_nullable=True)
    op.alter_column('docker_networks', 'time',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               server_default=sa.text('now()'),
               existing_nullable=False)
    op.drop_column('docker_networks', 'created_at')
    op.drop_column('docker_networks', 'driver_options')
    op.drop_column('docker_networks', 'container_count')
    op.drop_column('docker_networks', 'connected_containers')
    op.drop_column('docker_networks', 'ingress')
    op.drop_column('docker_networks', 'attachable')
    op.drop_column('docker_networks', 'enable_ipv6')
    op.drop_column('docker_networks', 'is_internal')
    op.drop_column('docker_networks', 'ip_range')
    # Rename ssh_user back to ssh_username in downgrade
    op.alter_column('devices', 'ssh_user', new_column_name='ssh_username')
    op.add_column('devices', sa.Column('monitoring_enabled', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True))
    op.add_column('devices', sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_devices_ip_address'), table_name='devices')
    op.drop_index(op.f('ix_devices_hostname'), table_name='devices')
    op.create_index(op.f('idx_devices_tags'), 'devices', ['tags'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_devices_status'), 'devices', ['status'], unique=False)
    op.create_index(op.f('idx_devices_monitoring_enabled'), 'devices', ['monitoring_enabled'], unique=False)
    op.create_index(op.f('idx_devices_last_seen'), 'devices', ['last_seen'], unique=False)
    op.create_index(op.f('idx_devices_ip_address'), 'devices', ['ip_address'], unique=False)
    op.create_index(op.f('idx_devices_hostname'), 'devices', ['hostname'], unique=False)
    op.create_unique_constraint(op.f('devices_hostname_key'), 'devices', ['hostname'], postgresql_nulls_not_distinct=False)
    op.alter_column('devices', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('devices', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('devices', 'tags',
               existing_type=sa.ARRAY(sa.String()),
               server_default=sa.text("'{}'::jsonb"),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('devices', 'ssh_port',
               existing_type=sa.INTEGER(),
               server_default=sa.text('22'),
               nullable=True)
    op.alter_column('devices', 'status',
               existing_type=sa.VARCHAR(length=20),
               server_default=sa.text("'unknown'::character varying"),
               nullable=True)
    op.alter_column('devices', 'device_type',
               existing_type=sa.VARCHAR(length=50),
               server_default=sa.text("'server'::character varying"),
               nullable=True)
    op.alter_column('devices', 'ip_address',
               existing_type=postgresql.INET(),
               nullable=True)
    op.alter_column('devices', 'id',
               existing_type=sa.UUID(),
               server_default=sa.text('uuid_generate_v4()'),
               existing_nullable=False)
    op.drop_column('devices', 'notes')
    op.drop_column('devices', 'metadata_info')
    op.drop_column('devices', 'environment')
    op.drop_column('devices', 'ssh_key_path')
    op.drop_column('devices', 'architecture')
    op.drop_column('devices', 'operating_system')
    op.drop_column('devices', 'mac_address')
    op.create_index(op.f('idx_container_snapshots_time'), 'container_snapshots', [sa.literal_column('time DESC')], unique=False)
    op.create_index(op.f('idx_container_snapshots_status'), 'container_snapshots', ['status'], unique=False)
    op.create_index(op.f('idx_container_snapshots_state'), 'container_snapshots', ['state'], unique=False)
    op.create_index(op.f('idx_container_snapshots_labels'), 'container_snapshots', ['labels'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_container_snapshots_environment'), 'container_snapshots', ['environment'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_container_snapshots_device_time'), 'container_snapshots', ['device_id', sa.literal_column('time DESC')], unique=False)
    op.create_index(op.f('idx_container_snapshots_container_name'), 'container_snapshots', ['container_name'], unique=False)
    op.create_index(op.f('idx_container_snapshots_container_id'), 'container_snapshots', ['container_id'], unique=False)
    op.alter_column('container_snapshots', 'networks',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=sa.text("'[]'::jsonb"),
               existing_nullable=True)
    op.alter_column('container_snapshots', 'volumes',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=sa.text("'[]'::jsonb"),
               existing_nullable=True)
    op.alter_column('container_snapshots', 'labels',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=sa.text("'{}'::jsonb"),
               existing_nullable=True)
    op.alter_column('container_snapshots', 'environment',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=sa.text("'{}'::jsonb"),
               existing_nullable=True)
    op.alter_column('container_snapshots', 'ports',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               server_default=sa.text("'[]'::jsonb"),
               existing_nullable=True)
    op.drop_column('container_snapshots', 'finished_at')
    op.drop_column('container_snapshots', 'started_at')
    op.drop_column('container_snapshots', 'created_at')
    op.drop_column('container_snapshots', 'memory_cache_bytes')
    op.drop_column('container_snapshots', 'exit_code')
    op.drop_column('container_snapshots', 'pid')
    op.drop_column('container_snapshots', 'dead')
    op.drop_column('container_snapshots', 'oom_killed')
    op.drop_column('container_snapshots', 'restarting')
    op.drop_column('container_snapshots', 'paused')
    op.drop_column('container_snapshots', 'running')
    op.drop_column('container_snapshots', 'image_id')
    op.add_column('backup_status', sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.add_column('backup_status', sa.Column('files_count', sa.BIGINT(), autoincrement=False, nullable=True))
    op.add_column('backup_status', sa.Column('start_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('backup_status', sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'pending'::character varying"), autoincrement=False, nullable=True))
    op.add_column('backup_status', sa.Column('size_bytes', sa.BIGINT(), autoincrement=False, nullable=True))
    op.add_column('backup_status', sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=False))
    op.add_column('backup_status', sa.Column('compressed_size_bytes', sa.BIGINT(), autoincrement=False, nullable=True))
    op.add_column('backup_status', sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('backup_status', sa.Column('end_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('backup_status', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True))
    op.add_column('backup_status', sa.Column('duration_seconds', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('backup_status', sa.Column('success_count', sa.BIGINT(), autoincrement=False, nullable=True))
    op.create_index(op.f('idx_backup_status_status'), 'backup_status', ['status'], unique=False)
    op.create_index(op.f('idx_backup_status_start_time'), 'backup_status', [sa.literal_column('start_time DESC')], unique=False)
    op.create_index(op.f('idx_backup_status_metadata'), 'backup_status', ['metadata'], unique=False, postgresql_using='gin')
    op.create_index(op.f('idx_backup_status_end_time'), 'backup_status', [sa.literal_column('end_time DESC')], unique=False)
    op.create_index(op.f('idx_backup_status_device_id'), 'backup_status', ['device_id'], unique=False)
    op.create_index(op.f('idx_backup_status_created_at'), 'backup_status', [sa.literal_column('created_at DESC')], unique=False)
    op.create_index(op.f('idx_backup_status_backup_type'), 'backup_status', ['backup_type'], unique=False)
    op.alter_column('backup_status', 'warning_count',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=True)
    op.alter_column('backup_status', 'error_count',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=True)
    op.alter_column('backup_status', 'backup_type',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=100),
               nullable=False)
    op.drop_column('backup_status', 'tags')
    op.drop_column('backup_status', 'backup_config')
    op.drop_column('backup_status', 'backup_metadata')
    op.drop_column('backup_status', 'archive_location')
    op.drop_column('backup_status', 'is_archived')
    op.drop_column('backup_status', 'expiry_date')
    op.drop_column('backup_status', 'retention_days')
    op.drop_column('backup_status', 'error_messages')
    op.drop_column('backup_status', 'checksum_algorithm')
    op.drop_column('backup_status', 'checksum')
    op.drop_column('backup_status', 'verification_method')
    op.drop_column('backup_status', 'verification_status')
    op.drop_column('backup_status', 'transfer_rate_mbps')
    op.drop_column('backup_status', 'deduplication_ratio')
    op.drop_column('backup_status', 'compression_ratio')
    op.drop_column('backup_status', 'backup_size_bytes')
    op.drop_column('backup_status', 'data_size_bytes')
    op.drop_column('backup_status', 'backup_status')
    op.drop_column('backup_status', 'backup_duration_seconds')
    op.drop_column('backup_status', 'backup_end_time')
    op.drop_column('backup_status', 'backup_start_time')
    op.drop_column('backup_status', 'backup_location')
    op.drop_column('backup_status', 'backup_method')
    op.drop_column('backup_status', 'backup_id')
    op.drop_column('backup_status', 'time')
    # ### end Alembic commands ###
