[project]
name = "infrastructor"
version = "1.0.0-dev"
description = "Infrastructure Management MCP Server with FastAPI integration"
authors = [
    {name = "Infrastructure Team", email = "dev@example.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.11"
keywords = ["infrastructure", "monitoring", "mcp", "fastapi", "docker", "ssh"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Systems Administration",
    "Topic :: System :: Monitoring",
    "Framework :: FastAPI",
]

dependencies = [
    # FastAPI and ASGI server
    "fastapi>=0.116.1,<1.0.0",
    "uvicorn[standard]>=0.35.0,<1.0.0",
    # FastMCP for MCP server integration
    "fastmcp>=2.11.0",
    # Database and ORM
    "sqlalchemy>=2.0.42,<3.0.0",
    "asyncpg>=0.30.0", # PostgreSQL async driver
    "alembic>=1.16.4", # Database migrations
    # Authentication and security
    "python-jose[cryptography]>=3.5.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.20",
    "slowapi>=0.1.9", # Rate limiting
    # SSH and networking
    "asyncssh>=2.21.0",
    "httpx>=0.28.1",
    # Data validation and serialization
    "pydantic[email]>=2.11.7,<3.0.0",
    "pydantic-settings>=2.10.1",
    # WebSocket support
    "websockets>=15.0.1",
    # Async utilities
    "asyncio-throttle>=1.0.2",
    "aiofiles>=24.1.0",
    # Configuration and logging
    "structlog>=25.4.0",
    "python-dotenv>=1.1.1",
    # HTTP client for external integrations
    "aiohttp>=3.12.15",
    # JSON and data processing
    "orjson>=3.11.1", # Fast JSON serialization
    "python-dateutil>=2.9.0",
    # YAML processing for Docker Compose files
    "PyYAML>=6.0.1",
    # Monitoring and health checks
    "psutil>=7.0.0", # System monitoring
    # CLI utilities (for internal tooling)
    "click>=8.2.1",
    "rich>=14.1.0", # Rich terminal output
    # Background task processing (optional - may add later)
    # "celery[redis]>=5.5.3",
    "jinja2>=3.1.6",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "httpx>=0.28.1",  # For testing FastAPI
    
    # Code quality
    "ruff>=0.12.7",  # Linting and formatting
    "mypy>=1.17.0",  # Type checking
    "pre-commit>=4.2.0",
    
    # Development tools
    "ipython>=9.4.0",
    "ipdb>=0.13.13",
    
    # Documentation
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.16",
    
    # Database development
    "pgcli>=4.3.0",  # PostgreSQL CLI
]

test = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "httpx>=0.28.1",
    "factory-boy>=3.3.3",  # Test data factories
    "faker>=37.4.2",  # Fake data generation
]

docs = [
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.16",
    "mkdocstrings[python]>=0.30.0",
]

[project.urls]
Homepage = "https://github.com/jmagar/infrastructor"
Repository = "https://github.com/jmagar/infrastructor"
Documentation = "https://github.com/jmagar/infrastructor/blob/main/README.md"
Issues = "https://github.com/jmagar/infrastructor/issues"

[project.scripts]
infrastructor = "src.main:cli"
infrastructor-dev = "src.cli:dev_server"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
dev-dependencies = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "httpx>=0.28.1",
    "ruff>=0.12.7",
    "mypy>=1.17.0",
    "pre-commit>=4.2.0",
    "ipython>=9.4.0",
    "ipdb>=0.13.13",
    "factory-boy>=3.3.3",
    "faker>=37.4.2",
]

[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "ARG001", # unused function argument
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.isort]
known-first-party = ["src"]
force-sort-within-sections = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "asyncssh.*",
    "fastmcp.*",
    "celery.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=apps/backend/src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
]
testpaths = ["apps/backend/tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.hatch.version]
path = "src/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src"]
